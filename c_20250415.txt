#include <stdio.h>
#include <time.h>
#define TRUE 1
#define FALSE 0

enum month {jan = 1, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec};
enum day {sun = 0, mon, tue, wed, thu, fri, sat};
int leapyear(int y)
{
    if (y % 4 == 0) {
        return 1;
    } else {
        return 0;
    }
}
int monthday(int y, int m)
{
    if (m == feb) {
        return 28 + leapyear(y);
    } else if (m == apr || m == jun || m == aug || m == nov) {
        return 30;
    } else {
        return 31;
    }
}
int startday(int y, int m)
{
    int totalday = (y - 1) * 365 + (y - 1) / 4 - (y - 1) / 100 + (y - 1) / 400;
    for (int i = jan; i <= m; i++) {
        totalday = totalday + monthday(y, i);
    }
    return (totalday % 7);
}
int diffday(int y, int m, int d)
{
    int totalday = (y - 1) * 365 + (y - 1) / 4 - (y - 1) / 100 + (y - 1) / 400;
    for (int i = jan; i <= m; i++) {
        totalday = totalday + monthday(y, i + 1);
    }
    totalday = totalday + d;
    return totalday;
}
int year()
{
    int year = 0;
    while(TRUE) {
        printf("year을 입력하세요> ");
        scanf("%d", &year);
        if (year >= 2000 && year <= 2099) {
            break;
        } else {
            continue;
        }
    }
    return year;
}
int month()
{
    int month = 0;
    while(TRUE) {
        printf("month를 입력하세요> ");
        scanf("%d", &month);
        if (month >= 1 && month <= 12) {
            break;
        } else {
            continue;
        }
    }
    return month;
}
int dday()
{
    int dday = 0, ddayyear = 0, ddaymonth = 0, ddayday = 0;
    time_t lt;
    struct tm *t;
    lt = time(NULL);
    t = localtime(&lt);
    int todayyear = t->tm_year + 1900, todaymonth = t->tm_mon + 1, todayday = t->tm_mday;
    while(TRUE) {
        printf("D-day 날짜를 입력하세요> ");
        scanf("%d", &dday);
        ddayyear = dday / 10000;
        ddaymonth = (dday / 100) % 100;
        ddayday = dday % 100;
        if (ddayyear >= todayyear && ddayyear <= 2099 && ddaymonth >= 1 && ddaymonth <= 12 && ddayday >= 1 && ddayday <= monthday(ddayyear, ddaymonth)) {
            if (ddayyear == todayyear && ddaymonth >= todaymonth) {
                if (ddaymonth == todaymonth && ddayday >= todayday) {
                    break;
                } else if (ddaymonth > todaymonth) {
                    break;
                }
            } else if (ddayyear > todayyear) {
                break;
            }
        }
    }
    int diff = diffday(dday / 10000, (dday / 100) % 100, dday % 100) - diffday(todayyear, todaymonth, todayday);
    return diff;
}
int cal(int year, int month)
{
    int start = startday(year, month - 1);
    printf(" s  m  t  w  t  f  s\n");
    for (int i = 0; i < monthday(year, month); i++) {
        if ((i + start + 1) % 7 == 0 && i != 0) {
            printf("\n%2d ", i + 1);
        } else if ((i + start + 1) % 7 == 0 && i == 0) {
            printf("%2d ", i + 1);
        } else if (i == 0) {
            for (int j = sun; j <= start; j++) {
                printf("   ");
            }
            printf("%2d ", i + 1);
        } else {
            printf("%2d ", i + 1);
        }
    }
}
void main()
{
    int y = year(), m = month();
    printf("\n%04d%02d\n", y, m);
    cal(y, m);
    printf("\n\n");
    printf("\nD-%d", dday());
}
