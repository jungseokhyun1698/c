#include <stdio.h>
#include <time.h>
#define TRUE 1
#define FALSE 0

enum month {jan, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec};
enum day {sun, mon, tue, wed, thu, fri, sat};
int leapyear(int y)
{
    if (y % 4 == 0) {
        return 1;
    } else {
        return 0;
    }
}
int monthday(int y, int m)
{
    if (m == 2) {
        return 28 + leapyear(y);
    } else if (m == 4 || m == 6 || m == 9 || m == 11) {
        return 30;
    } else {
        return 31;
    }
}
enum day startday(int y, enum month m)
{
    int totalday = (y - 1) * 365 + (y - 1) / 4 - (y - 1) / 100 + (y - 1) / 400;
    for (int i = jan; i < m; i++) {
        totalday = totalday + monthday(y, i + 1);
    }
    return (totalday % 7);
}
enum day diffday(int y, enum month m, int d)
{
    int totalday = (y - 1) * 365 + (y - 1) / 4 - (y - 1) / 100 + (y - 1) / 400;
    for (int i = jan; i < m; i++) {
        totalday = totalday + monthday(y, i + 2);
    }
    totalday = totalday + d;
    return totalday;
}
void main()
{
    int year = 0, month = 0, dday = 0;
    time_t lt;
    struct tm *t;
    lt = time(NULL);
    t = localtime(&lt);
    int todayyear = t->tm_year + 1900, todaymonth = t->tm_mon + 1, todayday = t->tm_mday;
    while(TRUE) {
        printf("year을 입력하세요> ");
        scanf("%d", &year);
        if (year >= 2000 && year <= 2099) {
            break;
        } else {
            continue;
        }
    }
    while(TRUE) {
        printf("month를 입력하세요> ");
        scanf("%d", &month);
        if (month >= 1 && month <= 12) {
            break;
        } else {
            continue;
        }
    }
    while(TRUE) {
        printf("D-day 날짜를 입력하세요> ");
        scanf("%d", &dday);
        if (dday / 10000 >= todayyear && dday / 10000 <= 2099 && (dday / 100) % 100 >= 1 && (dday / 100) % 100 <= 12 && dday % 100 >= 1 && dday % 100 <= monthday(dday / 10000, (dday / 100) % 100)) {
            if (dday / 10000 == todayyear && (dday / 100) % 100 >= todaymonth) {
                if ((dday / 100) % 100 == todaymonth && dday % 100 >= todayday) {
                    break;
                } else if ((dday / 100) % 100 > todaymonth) {
                    break;
                }
            } else if (dday / 10000 > todayyear) {
                break;
            }
        }
    }
    enum day start = startday(year, month - 1);
    printf("\n%04d%02d\n", year, month);
    printf(" s  m  t  w  t  f  s\n");
    for (int i = 0; i < monthday(year, month); i++) {
        if ((i + start + 1) % 7 == 0 && i != 0) {
            printf("\n%2d ", i + 1);
        } else if ((i + start + 1) % 7 == 0 && i == 0) {
            printf("%2d ", i + 1);
        } else if (i == 0) {
            for (int j = 0; j <= start; j++) {
                printf("   ");
            }
            printf("%2d ", i + 1);
        } else {
            printf("%2d ", i + 1);
        }
    }
    int diff = diffday(dday / 10000, (dday / 100) % 100, dday % 100) - diffday(todayyear, todaymonth, todayday);
    printf("\n\nD-%d", diff);
}
